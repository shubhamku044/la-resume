generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId   String   @unique
  email     String
  firstName String?
  lastName  String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  personalInfo    PersonalInfo?    @relation(fields: [personalInfoId], references: [id])
  education       Education[]
  experience      Experience[]
  projects        Project[]
  certifications  Certification[]
  accomplishments Accomplishment[]
  personalInfoId  String?

  resumes        Resume[]
  folders        Folder[]
  boards         Board[]
  jobs           Job[]
  contacts       Contact[]
  notes          Note[]
}

model PersonalInfo {
  id        String    @id @default(uuid()) @map("_id")
  email     String
  phone     String?
  dob       DateTime?
  address   String?
  summary   String?
  linkedin  String?
  github    String?
  portfolio String?
  twitter   String?
  languages String[]
  interests String[]
  skills    String[]
  fullName  String
  title     String?
  User      User[]
}

model Education {
  id           String  @id @default(uuid()) @map("_id")
  school       String
  degree       String
  fieldOfStudy String
  startYear    String
  endYear      String
  location     String
  gpa          Float?
  percentage   Float?
  User         User?   @relation(fields: [userId], references: [id])
  userId       String? @db.ObjectId

  @@map("education")
}

model Experience {
  id               String   @id @default(uuid()) @map("_id")
  company          String
  role             String
  startDate        String
  endDate          String?
  responsibilities String[]
  location         String
  User             User?    @relation(fields: [userId], references: [id])
  userId           String?  @db.ObjectId

  @@map("experience")
}

model Accomplishment {
  id     String  @id @default(uuid()) @map("_id")
  title  String
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Certification {
  id            String  @id @default(uuid()) @map("_id")
  title         String
  provider      String
  date          String
  credentialUrl String?
  User          User?   @relation(fields: [userId], references: [id])
  userId        String? @db.ObjectId
}

model Project {
  id           String   @id @default(uuid()) @map("_id")
  title        String
  description  String[]
  technologies String[]
  link         String?
  User         User?    @relation(fields: [userId], references: [id])
  userId       String?  @db.ObjectId
}

model Folder {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumes   Resume[]
  createdAt DateTime @default(now())
}

model Resume {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  slug        String   @unique 
  title       String
  userId      String
  user        User     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  folderId    String?  @db.ObjectId
  folder      Folder?  @relation(fields: [folderId], references: [id], onDelete: SetNull)
  data        Json
  type        String
  previewUrl  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hasPaid     Boolean  @default(false)
  orderNumber String?  
}

model Board {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  columns     Column[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Column {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  order       Int
  boardId     String   @db.ObjectId
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  jobs        Job[]
  createdAt   DateTime @default(now())

  @@index([boardId])
}

model Job {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  company     String
  description String?
  location    String?
  url         String?
  salary      String?
  status      JobStatus @default(Applied)
  columnId    String   @db.ObjectId
  column      Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appliedAt   DateTime?
  updatedAt   DateTime @updatedAt
  notes       Note[]
  contacts    Contact[]
  createdAt   DateTime @default(now())

  @@index([columnId])
  @@index([userId])
}

model Note {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  jobId       String   @db.ObjectId
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@index([jobId])
  @@index([userId])
}

model Contact {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String?
  phone       String?
  position    String?
  jobId       String   @db.ObjectId
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([jobId])
  @@index([userId])
}

enum JobStatus {
  Interested
  Applied
  Interviewing
  Offer
  Rejected
  Archived
}
